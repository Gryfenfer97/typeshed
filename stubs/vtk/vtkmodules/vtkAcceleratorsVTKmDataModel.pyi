from collections.abc import Callable, MutableSequence, Sequence
from typing import Tuple, TypeAlias, TypeVar, Union, overload

import vtkmodules.vtkCommonCore
import vtkmodules.vtkCommonDataModel

Callback: TypeAlias = Union[Callable[..., None], None]
Buffer = TypeVar("Buffer")
Pointer = TypeVar("Pointer")
Template = TypeVar("Template")

class vtkmDataSet(vtkmodules.vtkCommonDataModel.vtkDataSet):
    def ComputeBounds(self) -> None: ...
    def CopyStructure(self, ds: vtkmodules.vtkCommonDataModel.vtkDataSet) -> None: ...
    def DeepCopy(self, src: vtkmodules.vtkCommonDataModel.vtkDataObject) -> None: ...
    @overload
    def FindCell(
        self,
        x: MutableSequence[float],
        cell: vtkmodules.vtkCommonDataModel.vtkCell,
        cellId: int,
        tol2: float,
        subId: int,
        pcoords: MutableSequence[float],
        weights: MutableSequence[float],
    ) -> int: ...
    @overload
    def FindCell(
        self,
        x: MutableSequence[float],
        cell: vtkmodules.vtkCommonDataModel.vtkCell,
        gencell: vtkmodules.vtkCommonDataModel.vtkGenericCell,
        cellId: int,
        tol2: float,
        subId: int,
        pcoords: MutableSequence[float],
        weights: MutableSequence[float],
    ) -> int: ...
    def FindPoint(self, x: MutableSequence[float]) -> int: ...
    def GetActualMemorySize(self) -> int: ...
    @overload
    def GetCell(self, cellId: int) -> vtkmodules.vtkCommonDataModel.vtkCell: ...
    @overload
    def GetCell(self, cellId: int, cell: vtkmodules.vtkCommonDataModel.vtkGenericCell) -> None: ...
    @overload
    def GetCell(self, i: int, j: int, k: int) -> vtkmodules.vtkCommonDataModel.vtkCell: ...
    def GetCellBounds(self, cellId: int, bounds: MutableSequence[float]) -> None: ...
    @overload
    def GetCellPoints(self, cellId: int, ptIds: vtkmodules.vtkCommonCore.vtkIdList) -> None: ...
    @overload
    def GetCellPoints(self, cellId: int, npts: int, pts: Sequence[int], ptIds: vtkmodules.vtkCommonCore.vtkIdList) -> None: ...
    def GetCellType(self, cellId: int) -> int: ...
    def GetDataObjectType(self) -> int: ...
    def GetMaxCellSize(self) -> int: ...
    def GetNumberOfCells(self) -> int: ...
    def GetNumberOfGenerationsFromBase(self, type: str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type: str) -> int: ...
    def GetNumberOfPoints(self) -> int: ...
    @overload
    def GetPoint(self, ptId: int) -> Tuple[float, float, float]: ...
    @overload
    def GetPoint(self, id: int, x: MutableSequence[float]) -> None: ...
    def GetPointCells(self, ptId: int, cellIds: vtkmodules.vtkCommonCore.vtkIdList) -> None: ...
    def Initialize(self) -> None: ...
    def IsA(self, type: str) -> int: ...
    @staticmethod
    def IsTypeOf(type: str) -> int: ...
    def NewInstance(self) -> vtkmDataSet: ...
    @staticmethod
    def SafeDownCast(o: vtkmodules.vtkCommonCore.vtkObjectBase) -> vtkmDataSet: ...
    def ShallowCopy(self, src: vtkmodules.vtkCommonDataModel.vtkDataObject) -> None: ...
    def Squeeze(self) -> None: ...
