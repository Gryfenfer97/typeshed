from collections.abc import Callable, MutableSequence
from typing import Tuple, TypeVar, Union, overload

import vtkmodules.vtkCommonCore
import vtkmodules.vtkCommonDataModel
import vtkmodules.vtkCommonExecutionModel
import vtkmodules.vtkImagingCore
import vtkmodules.vtkRenderingCore

Callback = Union[Callable[..., None], None]
Buffer = TypeVar("Buffer")
Pointer = TypeVar("Pointer")
Template = TypeVar("Template")

class vtkDepthImageToPointCloud(vtkmodules.vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    def CullFarPointsOff(self) -> None: ...
    def CullFarPointsOn(self) -> None: ...
    def CullNearPointsOff(self) -> None: ...
    def CullNearPointsOn(self) -> None: ...
    def GetCamera(self) -> vtkmodules.vtkRenderingCore.vtkCamera: ...
    def GetCullFarPoints(self) -> bool: ...
    def GetCullNearPoints(self) -> bool: ...
    def GetMTime(self) -> int: ...
    def GetNumberOfGenerationsFromBase(self, type: str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type: str) -> int: ...
    def GetOutputPointsPrecision(self) -> int: ...
    def GetProduceColorScalars(self) -> bool: ...
    def GetProduceVertexCellArray(self) -> bool: ...
    def IsA(self, type: str) -> int: ...
    @staticmethod
    def IsTypeOf(type: str) -> int: ...
    def NewInstance(self) -> vtkDepthImageToPointCloud: ...
    def ProduceColorScalarsOff(self) -> None: ...
    def ProduceColorScalarsOn(self) -> None: ...
    def ProduceVertexCellArrayOff(self) -> None: ...
    def ProduceVertexCellArrayOn(self) -> None: ...
    @staticmethod
    def SafeDownCast(o: vtkmodules.vtkCommonCore.vtkObjectBase) -> vtkDepthImageToPointCloud: ...
    def SetCamera(self, __a: vtkmodules.vtkRenderingCore.vtkCamera) -> None: ...
    def SetCullFarPoints(self, _arg: bool) -> None: ...
    def SetCullNearPoints(self, _arg: bool) -> None: ...
    def SetOutputPointsPrecision(self, _arg: int) -> None: ...
    def SetProduceColorScalars(self, _arg: bool) -> None: ...
    def SetProduceVertexCellArray(self, _arg: bool) -> None: ...

class vtkImageResliceMapper(vtkmodules.vtkRenderingCore.vtkImageMapper3D):
    def AutoAdjustImageQualityOff(self) -> None: ...
    def AutoAdjustImageQualityOn(self) -> None: ...
    def GetAutoAdjustImageQuality(self) -> int: ...
    @overload
    def GetBounds(self) -> Tuple[float, float, float, float, float, float]: ...
    @overload
    def GetBounds(self, bounds: MutableSequence[float]) -> None: ...
    def GetImageSampleFactor(self) -> int: ...
    def GetImageSampleFactorMaxValue(self) -> int: ...
    def GetImageSampleFactorMinValue(self) -> int: ...
    def GetIndexBounds(self, extent: MutableSequence[float]) -> None: ...
    def GetInterpolator(self) -> vtkmodules.vtkImagingCore.vtkAbstractImageInterpolator: ...
    def GetJumpToNearestSlice(self) -> int: ...
    def GetMTime(self) -> int: ...
    def GetNumberOfGenerationsFromBase(self, type: str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type: str) -> int: ...
    def GetResampleToScreenPixels(self) -> int: ...
    def GetSeparateWindowLevelOperation(self) -> int: ...
    def GetSlabSampleFactor(self) -> int: ...
    def GetSlabSampleFactorMaxValue(self) -> int: ...
    def GetSlabSampleFactorMinValue(self) -> int: ...
    def GetSlabThickness(self) -> float: ...
    def GetSlabType(self) -> int: ...
    def GetSlabTypeAsString(self) -> str: ...
    def GetSlabTypeMaxValue(self) -> int: ...
    def GetSlabTypeMinValue(self) -> int: ...
    def IsA(self, type: str) -> int: ...
    @staticmethod
    def IsTypeOf(type: str) -> int: ...
    def JumpToNearestSliceOff(self) -> None: ...
    def JumpToNearestSliceOn(self) -> None: ...
    def NewInstance(self) -> vtkImageResliceMapper: ...
    def ReleaseGraphicsResources(self, __a: vtkmodules.vtkCommonCore.vtkWindow) -> None: ...
    def Render(
        self, renderer: vtkmodules.vtkRenderingCore.vtkRenderer, prop: vtkmodules.vtkRenderingCore.vtkImageSlice
    ) -> None: ...
    def ResampleToScreenPixelsOff(self) -> None: ...
    def ResampleToScreenPixelsOn(self) -> None: ...
    @staticmethod
    def SafeDownCast(o: vtkmodules.vtkCommonCore.vtkObjectBase) -> vtkImageResliceMapper: ...
    def SeparateWindowLevelOperationOff(self) -> None: ...
    def SeparateWindowLevelOperationOn(self) -> None: ...
    def SetAutoAdjustImageQuality(self, _arg: int) -> None: ...
    def SetImageSampleFactor(self, _arg: int) -> None: ...
    def SetInterpolator(self, interpolator: vtkmodules.vtkImagingCore.vtkAbstractImageInterpolator) -> None: ...
    def SetJumpToNearestSlice(self, _arg: int) -> None: ...
    def SetResampleToScreenPixels(self, _arg: int) -> None: ...
    def SetSeparateWindowLevelOperation(self, _arg: int) -> None: ...
    def SetSlabSampleFactor(self, _arg: int) -> None: ...
    def SetSlabThickness(self, _arg: float) -> None: ...
    def SetSlabType(self, _arg: int) -> None: ...
    def SetSlabTypeToMax(self) -> None: ...
    def SetSlabTypeToMean(self) -> None: ...
    def SetSlabTypeToMin(self) -> None: ...
    def SetSlabTypeToSum(self) -> None: ...
    def SetSlicePlane(self, plane: vtkmodules.vtkCommonDataModel.vtkPlane) -> None: ...

class vtkImageSliceCollection(vtkmodules.vtkRenderingCore.vtkPropCollection):
    def AddItem(self, a: vtkmodules.vtkRenderingCore.vtkImageSlice) -> None: ...
    def GetNextImage(self) -> vtkmodules.vtkRenderingCore.vtkImageSlice: ...
    def GetNextItem(self) -> vtkmodules.vtkRenderingCore.vtkImageSlice: ...
    def GetNumberOfGenerationsFromBase(self, type: str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type: str) -> int: ...
    def IsA(self, type: str) -> int: ...
    @staticmethod
    def IsTypeOf(type: str) -> int: ...
    def NewInstance(self) -> vtkImageSliceCollection: ...
    @staticmethod
    def SafeDownCast(o: vtkmodules.vtkCommonCore.vtkObjectBase) -> vtkImageSliceCollection: ...
    def Sort(self) -> None: ...

class vtkImageStack(vtkmodules.vtkRenderingCore.vtkImageSlice):
    def AddImage(self, prop: vtkmodules.vtkRenderingCore.vtkImageSlice) -> None: ...
    def BuildPaths(
        self, paths: vtkmodules.vtkRenderingCore.vtkAssemblyPaths, path: vtkmodules.vtkRenderingCore.vtkAssemblyPath
    ) -> None: ...
    def GetActiveImage(self) -> vtkmodules.vtkRenderingCore.vtkImageSlice: ...
    def GetActiveLayer(self) -> int: ...
    @overload
    def GetBounds(self) -> Tuple[float, float, float, float, float, float]: ...
    @overload
    def GetBounds(self, bounds: MutableSequence[float]) -> None: ...
    @overload
    def GetImages(self) -> vtkImageSliceCollection: ...
    @overload
    def GetImages(self, __a: vtkmodules.vtkRenderingCore.vtkPropCollection) -> None: ...
    def GetMTime(self) -> int: ...
    def GetMapper(self) -> vtkmodules.vtkRenderingCore.vtkImageMapper3D: ...
    def GetNextPath(self) -> vtkmodules.vtkRenderingCore.vtkAssemblyPath: ...
    def GetNumberOfGenerationsFromBase(self, type: str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type: str) -> int: ...
    def GetNumberOfPaths(self) -> int: ...
    def GetProperty(self) -> vtkmodules.vtkRenderingCore.vtkImageProperty: ...
    def GetRedrawMTime(self) -> int: ...
    def HasImage(self, prop: vtkmodules.vtkRenderingCore.vtkImageSlice) -> int: ...
    def HasTranslucentPolygonalGeometry(self) -> int: ...
    def InitPathTraversal(self) -> None: ...
    def IsA(self, type: str) -> int: ...
    @staticmethod
    def IsTypeOf(type: str) -> int: ...
    def NewInstance(self) -> vtkImageStack: ...
    def ReleaseGraphicsResources(self, win: vtkmodules.vtkCommonCore.vtkWindow) -> None: ...
    def RemoveImage(self, prop: vtkmodules.vtkRenderingCore.vtkImageSlice) -> None: ...
    def RenderOpaqueGeometry(self, viewport: vtkmodules.vtkRenderingCore.vtkViewport) -> int: ...
    def RenderOverlay(self, viewport: vtkmodules.vtkRenderingCore.vtkViewport) -> int: ...
    def RenderTranslucentPolygonalGeometry(self, viewport: vtkmodules.vtkRenderingCore.vtkViewport) -> int: ...
    @staticmethod
    def SafeDownCast(o: vtkmodules.vtkCommonCore.vtkObjectBase) -> vtkImageStack: ...
    def SetActiveLayer(self, _arg: int) -> None: ...
    def ShallowCopy(self, prop: vtkmodules.vtkRenderingCore.vtkProp) -> None: ...
