from collections.abc import Callable
from typing import TypeVar, Union

import vtkmodules.vtkCommonCore
import vtkmodules.vtkCommonDataModel

Buffer = TypeVar("Buffer")
Pointer = TypeVar("Pointer")
Template = TypeVar("Template")

class vtkThreadedImageWriter(vtkmodules.vtkCommonCore.vtkObject):
    def EncodeAndWrite(self, image: vtkmodules.vtkCommonDataModel.vtkImageData, fileName: str) -> None: ...
    def Finalize(self) -> None: ...
    def GetMaxThreads(self) -> int: ...
    def GetNumberOfGenerationsFromBase(self, type: str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type: str) -> int: ...
    def Initialize(self) -> None: ...
    def IsA(self, type: str) -> int: ...
    @staticmethod
    def IsTypeOf(type: str) -> int: ...
    def NewInstance(self) -> vtkThreadedImageWriter: ...
    @staticmethod
    def SafeDownCast(o: vtkmodules.vtkCommonCore.vtkObjectBase) -> vtkThreadedImageWriter: ...
    def SetMaxThreads(self, __a: int) -> None: ...
