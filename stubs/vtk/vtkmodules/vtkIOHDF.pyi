import vtkmodules.vtkCommonExecutionModel
import vtkmodules.vtkCommonCore
from typing import Callable, TypeVar, Union, overload

Callback = Union[Callable[..., None], None]
Buffer = TypeVar("Buffer")
Pointer = TypeVar("Pointer")
Template = TypeVar("Template")


class vtkHDFReader(vtkmodules.vtkCommonExecutionModel.vtkDataObjectAlgorithm):
    def CanReadFile(self, name: str) -> int: ...
    def GetCellArrayName(self, index: int) -> str: ...

    def GetCellDataArraySelection(
        self) -> vtkmodules.vtkCommonCore.vtkDataArraySelection: ...
    def GetFieldDataArraySelection(
        self) -> vtkmodules.vtkCommonCore.vtkDataArraySelection: ...

    def GetFileName(self) -> str: ...
    def GetMaximumLevelsToReadByDefaultForAMR(self) -> int: ...
    def GetNumberOfCellArrays(self) -> int: ...
    def GetNumberOfGenerationsFromBase(self, type: str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type: str) -> int: ...
    def GetNumberOfPointArrays(self) -> int: ...

    @overload
    def GetOutputAsDataSet(
        self) -> vtkmodules.vtkCommonDataModel.vtkDataSet: ...

    @overload
    def GetOutputAsDataSet(
        self, index: int) -> vtkmodules.vtkCommonDataModel.vtkDataSet: ...

    def GetPointArrayName(self, index: int) -> str: ...
    def GetPointDataArraySelection(
        self) -> vtkmodules.vtkCommonCore.vtkDataArraySelection: ...

    def IsA(self, type: str) -> int: ...
    @staticmethod
    def IsTypeOf(type: str) -> int: ...
    def NewInstance(self) -> vtkHDFReader: ...

    @staticmethod
    def SafeDownCast(
        o: vtkmodules.vtkCommonCore.vtkObjectBase) -> vtkHDFReader: ...

    def SetFileName(self, _arg: str) -> None: ...
    def SetMaximumLevelsToReadByDefaultForAMR(self, _arg: int) -> None: ...
